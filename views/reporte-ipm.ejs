<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Casos detectados en proceso de IPM</title>
    <style>
        body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    margin: 0;
    padding: 0;
    width: 100%;
}
.container {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
}
h1, h2, h3, h4 {
    color: #2c3e50;
}
.table-responsive {
    width: 100%;
    overflow-x: auto;
    margin-bottom: 20px;
}
table {
    width: max-content;
    border-collapse: collapse;
    font-size: 0.9em;
}
th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
    white-space: nowrap;
}
th {
    background-color: #3498db;
    color: white;
    font-weight: bold;
    position: sticky;
    top: 0;
    z-index: 10;
}
tr:nth-child(even) {
    background-color: #f2f2f2;
}
.case-container {
    border: 1px solid #bdc3c7;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 20px;
    background-color: #ecf0f1;
}
.case-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #2980b9;
    font-size: 1.2em;
}
textarea {
    width: 100%;
    padding: 5px;
    border: 1px solid #bdc3c7;
    border-radius: 5px;
    resize: vertical;
    box-sizing: border-box;
    margin-bottom: 5px;
}
button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 5px 10px;
    font-size: 14px;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}
button:hover {
    background-color: #2980b9;
}
.table-title {
    font-weight: bold;
    margin-top: 20px;
    margin-bottom: 10px;
    color: #2c3e50;
}
.insert-container {
    display: flex; /* Usar flexbox para alinear textarea y botón */
    align-items: center; /* Centrar verticalmente */
    margin-bottom: 10px; /* Espacio entre contenedores */
}
/* Estilos para el botón fijo */
#unificarBtn {
    position: fixed;
    bottom: 20px; /* Distancia desde la parte inferior de la pantalla */
    right: 20px;  /* Distancia desde la parte derecha de la pantalla */
    background-color: #2980b9; /* Color de fondo del botón */
    color: white; /* Color del texto */
    padding: 10px 20px; /* Espaciado interno */
    border: none; /* Sin bordes */
    border-radius: 5px; /* Bordes redondeados */
    cursor: pointer; /* Cambiar el cursor cuando se coloca sobre el botón */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra para darle un poco de profundidad */
    z-index: 1000; /* Asegura que esté por encima de otros elementos */
}

/* Estilo cuando el botón es pulsado (opcional) */
#unificarBtn:active {
    background-color: #2980b9; /* Color de fondo más oscuro cuando se hace clic */
}
/* Estilo para el contenedor del botón de crear reporte */
.fixed-button-container {
    position: fixed; /* Fija el contenedor en la pantalla */
    bottom: 80px; /* Distancia desde la parte inferior (ajusta según sea necesario) */
    right: 20px; /* Distancia desde la derecha */
    z-index: 1000; /* Asegura que esté por encima de otros elementos */
}

/* Estilo para el botón dentro del contenedor */
.fixed-button-container button {
    background-color: #3498db; /* Color de fondo del botón */
    color: white; /* Color del texto */
    border: none; /* Sin borde */
    padding: 10px 15px; /* Espaciado interno */
    border-radius: 5px; /* Bordes redondeados */
    cursor: pointer; /* Cambia el cursor al pasar sobre el botón */
    font-size: 16px; /* Tamaño de fuente */
}

/* Cambiar el color del botón al pasar el mouse */
.fixed-button-container button:hover {
    background-color: #2980b9; /* Color de fondo al pasar el mouse */
}

/* Estilo para el botón de unificar casos */
#unificarBtn {
    position: fixed;
    bottom: 20px; /* Distancia desde la parte inferior de la pantalla */
    right: 20px;  /* Distancia desde la parte derecha de la pantalla */
    background-color:#3498db; /* Color de fondo del botón */
    color: white; /* Color del texto */
    padding: 10px 20px; /* Espaciado interno */
    border: none; /* Sin bordes */
    border-radius: 5px; /* Bordes redondeados */
    cursor: pointer; /* Cambiar el cursor cuando se coloca sobre el botón */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Sombra para darle un poco de profundidad */
    z-index: 1000; /* Asegura que esté por encima de otros elementos */
}

/* Estilo cuando el botón es pulsado (opcional) */
#unificarBtn:active {
    background-color: #0056b3; /* Color de fondo más oscuro cuando se hace clic */
}
    </style>
</head>
<body>
    <div class="container">
        <h1>Casos detectados en proceso de IPM</h1>
        <textarea id="dataInput" rows="10" placeholder="Pega aquí los datos..."></textarea><br>
        <button onclick="processData()">Generar Tablas</button>
        
        <h2>Casos Procesados</h2>
        <!-- Botón de unificar casos -->
        <button id="unificarBtn" onclick="unificarCasos()">Unificar Casos Seleccionados</button>
        <!-- Botón de renumerar casos -->
        
        
        <div id="caseContainer"></div>

        <!-- Nuevo textarea para la tabla de evidencia de anulaciones / confirmaciones manual -->
        <h2>Tabla de Evidencia de Anulaciones / Confirmaciones Manual</h2>
        <textarea id="evidenceInput" rows="10" placeholder="Pega aquí los datos de la tabla..."></textarea><br>
        <button onclick="insertEvidenceData()">Insertar Datos en Tabla</button>

        <h2>Datos de Anulaciones / Confirmaciones</h2>
        <table id="evidenceTable">
            <thead>
                <tr>
                    <th>Tipo Autorización</th>
                    <th>Hora Autorización</th>
                    <th>Estado</th>
                    <th>Hora Intervención</th>
                    <th>Usuario</th>
                    <th>AUTOCODI</th>
                    <th>PAN</th>
                    <th>Cta.Infinitus</th>
                    <th>Cuenta.Mambu</th>
                    <th>CardReferenceToken</th>
                    <th>MontoLocal</th>
                    <th>MonedaLocal</th>
                    <th>MontoOrigen</th>
                    <th>MonedaOrigen</th>
                    <th>Comercio</th>
                    <th>PaisComercio</th>
                    <th>CiudadComercio</th>
                    <th>MCC</th>
                    <th>VISA_TID</th>
                    <th>Internacional</th>
                    <th>RTA_MAMBU</th>
                </tr>
            </thead>
            <tbody>
                <!-- Aquí se insertarán los datos -->
            </tbody>
        </table>
    </div>

    <!-- Contenedor fijo para el botón de crear reporte -->
    <div class="fixed-button-container">
        <button onclick="generateReport()">Crear Reporte HTML</button>
    </div>

    <script>
        function processData() {
    const input = document.getElementById('dataInput').value;
    const rows = input.split('\n');
    const headers = [
        "PROCESADA", "MENSAJE", "TIPOAUTORIZACION", "OBSERVACION", "Bin", "CuentaExterna",
        "MontoImpactado", "FeeMambu", "MonedaOrigen", "visaTID", "FILENAME",
        "FILEPROCEFECHA", "ROWINFILE", "DE3", "DE4", "DE6", "DE12", "DE24",
        "DE25", "DE38", "DE43", "DE48", "DE49", "DE51", "DE63", "AUTOVISATID",
        "CUPON", "MOVIMTIPO", "CTA_INFI", "AUTOID", "AUTOCODI", "AUTOFECHA",
        "CONSUAUTOCODI", "CONSUFECHA", "CONSUMIPOR", "AUTOIMPOR", "ORIGEN_",
        "DIFERENCIA", "A_MAMBU", "RELA_OK", "ONL_OK", "STATUSMAMBU", "Cuenta",
        "Adicional", "Número Tarjeta", "Fecha", "Importe","Moneda", "Importe Confirmado",
        "Internacional", "Importe Original", "Moneda Original", "Plan", "Cuotas",
        "Código Autorización", "Número Comercio", "Estado", "Fecha Estado",
        "Relacionada", "Nro.Cupón", "Origen", "Rechazo", "ICA", "MCC", "TCC",
        "Regla Fraude", "Modo Entrada", "Terminal POS", "Stand-In",
        "Id Autorización", "Estado de la Autorización del POS",
        "Id Transaccion - Marca", "MAMBULOGID", "RECALLID", "ERRORCODE",
        "ERRORSOURCE", "ERRORREASON", "REQUESTMESSAGECOMPLETE",
        "RESULTMESSAGECOMPLETE"
    ];

    const table1Headers = ["Cuenta", "Adicional", "Número Tarjeta", "Fecha", "Importe","Moneda", "Importe Confirmado", "Internacional", "Importe Original", "Moneda Original", "Plan", "Cuotas", "Código Autorización", "Número Comercio", "Estado", "Fecha Estado", "Relacionada", "Nro.Cupón", "Origen", "Rechazo", "ICA", "MCC", "TCC", "Regla Fraude", "Modo Entrada", "Terminal POS", "Stand-In", "Id Autorización", "Estado de la Autorización del POS", "Id Transaccion - Marca"];
    const table2Headers = ["FILEPROCEFECHA", "DE3", "DE4", "DE6", "DE24", "DE25", "DE38", "DE43", "DE49", "DE51", "DE63", "AUTOVISATID", "CTA_INFI", "AUTOCODI", "AUTOFECHA", "CONSUFECHA", "CONSUMIPOR", "AUTOIMPOR", "ORIGEN_", "DIFERENCIA"];
    const table3Headers = ["REQUESTMESSAGECOMPLETE", "RESULTMESSAGECOMPLETE"];

    let chileHTML = '<h3>Casos para Chile (Bin: 555505)</h3>';
    let peruHTML = '<h3>Casos para Perú (Bin: 523510)</h3>';
    let chileCases = []; // Almacenar datos de Chile
    let peruCases = []; // Almacenar datos de Perú

    rows.forEach(row => {
        const columns = row.split('\t');
        if (columns.length > 0) {
            const binValue = columns[headers.indexOf("Bin")]?.trim() || '';
            const cuentaExterna = columns[headers.indexOf("CuentaExterna")]?.trim() || '';
            const montoImpactado = columns[headers.indexOf("MontoImpactado")]?.trim() || '';
            const mensaje = columns[headers.indexOf("MENSAJE")]?.trim() || '';
            const origen = columns[headers.indexOf("ORIGEN_")]?.trim() || '';

            let caseData = {
                binValue,
                cuentaExterna,
                montoImpactado,
                mensaje,
                origen,
                columns
            };

            if (binValue === "555505") {
                chileCases.push(caseData); // Almacenar datos de Chile
            } else if (binValue === "523510") {
                peruCases.push(caseData); // Almacenar datos de Perú
            }
        }
    });

    // Ordenar los casos por CuentaExterna
    chileCases.sort((a, b) => a.cuentaExterna.localeCompare(b.cuentaExterna));
    peruCases.sort((a, b) => a.cuentaExterna.localeCompare(b.cuentaExterna));

    // Generar el HTML para Chile
    chileCases.forEach((caseData, index) => {
        chileHTML += generateCaseHTML(caseData, index + 1, 'Chile', headers, table1Headers, table2Headers, table3Headers);
    });

    // Generar el HTML para Perú
    peruCases.forEach((caseData, index) => {
        peruHTML += generateCaseHTML(caseData, index + 1, 'Perú', headers, table1Headers, table2Headers, table3Headers);
    });

    document.getElementById('caseContainer').innerHTML = chileHTML + peruHTML;
    loadMessageTemplates();
}

function generateCaseHTML(caseData, caseNumber, country, headers, table1Headers, table2Headers, table3Headers) {
    let caseHTML = `<div class="case-container" data-case="${caseNumber}" data-case-bin="${caseData.binValue}">
        <div class="case-header">
            <input type="checkbox" class="case-checkbox" data-case="${caseNumber}">
            Caso ${country} ${caseNumber}
        </div>
        <div><strong>CUENTA EXTERNA:</strong> ${caseData.cuentaExterna}</div>
        <div><strong>MONTO:</strong> ${caseData.montoImpactado}</div>`;

    // Mostrar el selector de mensajes si el origen es "FORZADA en cierre lote"
    if (caseData.origen === "FORZADA en cierre lote") {
        const selectorId = `messageSelector${country}${caseNumber}`;
        caseHTML += `
            <div><strong>MENSAJE:</strong>
                <select id="${selectorId}" onchange="updateMessage('${country}', ${caseNumber})">
                    <option value="">Seleccione un mensaje...</option>
                </select>
            </div>
            <div id="selectedMessage${country}${caseNumber}"></div>`;
    } else {
        caseHTML += `<div><strong>MENSAJE:</strong> ${caseData.mensaje}</div>`;
    }

    // Generar las tres tablas con sus respectivos headers
    caseHTML += `
        <div><strong>ORIGEN:</strong> ${caseData.origen}</div>
        <div class="table-title">Datos de Autorización:</div>
        ${generateTable(headers, caseData.columns, table1Headers, caseNumber, 'auth', country)}
        <div class="table-title">Datos de Presentación:</div>
        ${generateTable(headers, caseData.columns, table2Headers, caseNumber, 'pres', country)}
        <div class="table-title">Interfaz Mambu:</div>
        ${generateTable(headers, caseData.columns, table3Headers, caseNumber, 'mambu', country)}
    </div>`;

    // Agregar los textareas fuera del contenedor del caso
    if (caseData.origen === "FORZADA en cierre lote") {
        caseHTML += `
            <div class="insert-container">
                <textarea id="authDataInput${country}${caseNumber}" rows="1" placeholder="Agregar datos de autorización del caso ${caseNumber}..."></textarea>
                <button onclick="addRow('auth', '${country}', ${caseNumber})">Insertar</button>
            </div>
            <div class="insert-container">
                <textarea id="presDataInput${country}${caseNumber}" rows="1" placeholder="Agregar datos de presentación del caso ${caseNumber}..."></textarea>
                <button onclick="addRow('pres', '${country}', ${caseNumber})">Insertar</button>
            </div>
            <div class="insert-container">
                <textarea id="mambuDataInput${country}${caseNumber}" rows="1" placeholder="Agregar datos de interfaz Mambu del caso ${caseNumber}..."></textarea>
                <button onclick="addRow('mambu', '${country}', ${caseNumber})">Insertar</button>
            </div>`;
    }

    return caseHTML;
}
function generateTable(headers, columns, tableHeaders, caseNumber, tableType, country) {
    // Generar el ID de la tabla incluyendo el país y el número de caso
    let tableHTML = `<div class="table-responsive"><table id="table${tableType}${country}${caseNumber}"><thead><tr>`;
    
    // Generar los encabezados de la tabla
    tableHeaders.forEach(header => {
        tableHTML += `<th>${header}</th>`;
    });
    tableHTML += '</tr></thead><tbody>';

    // Agregar la fila de datos
    const row = document.createElement('tr');
    tableHeaders.forEach(header => {
        const columnIndex = headers.indexOf(header);
        const cellValue = columns[columnIndex]?.trim() || '';
        row.innerHTML += `<td>${cellValue}</td>`;
    });
    tableHTML += row.outerHTML; // Agregar la fila a la tabla
    tableHTML += '</tbody></table></div>';

    return tableHTML;
}

function addRow(type, country, caseNumber) {
    // Generar el ID de la tabla basado en el tipo, país y número de caso
    const tableId = `#table${type}${country}${caseNumber}`;
    console.log(`Buscando tabla con ID: ${tableId}`); // Log para depurar
    const table = document.querySelector(tableId);

    // Si no se encuentra la tabla, mostrar error
    if (!table) {
        console.error(`No se encontró la tabla con ID: ${tableId}`); // Log para depurar
        return;
    }

    // Obtener el valor del textarea correspondiente
    const dataInput = document.getElementById(`${type}DataInput${country}${caseNumber}`).value;
    
    // Separar las filas por salto de línea
    const rows = dataInput.split('\n'); // Separar las filas por salto de línea

    // Agregar las celdas a la nueva fila
    rows.forEach(row => {
        // Trim para eliminar espacios en blanco al inicio y al final
        const trimmedRow = row.trim();

        // Ignorar filas vacías
        if (trimmedRow.length === 0) {
            return; // Salir de la función para esta iteración
        }

        const dataColumns = trimmedRow.split('\t'); // Separar las columnas por tabulador
        const newRow = table.insertRow(); // Insertar una nueva fila para cada fila de datos

        dataColumns.forEach(data => {
            const newCell = newRow.insertCell();
            newCell.innerHTML = data;
        });

        // Agregar el botón de eliminar en la última celda de la fila
        const deleteButtonHTML = `<button onclick="deleteRow(this)">Eliminar</button>`;
        const actionCell = newRow.insertCell(); // Crear una nueva celda para el botón
        actionCell.innerHTML = deleteButtonHTML; // Agregar el botón de eliminar
    });
}

// Función para eliminar la fila
function deleteRow(button) {
    // Obtener la fila que contiene el botón
    const row = button.closest('tr');
    // Eliminar la fila del DOM
    row.parentNode.removeChild(row);
}

function unificarCasos() {
    console.log('Iniciando proceso de unificación...');
    const selectedCheckboxes = document.querySelectorAll('.case-checkbox:checked');
    
    console.log('Checkboxes seleccionados:', selectedCheckboxes.length);

    if (selectedCheckboxes.length < 2) {
        alert('Por favor, selecciona al menos dos casos para unificar.');
        return;
    }

    // Obtener los casos seleccionados y sus contenedores
    let selectedCases = Array.from(selectedCheckboxes).map(checkbox => {
        const caseNum = parseInt(checkbox.getAttribute('data-case'));
        const container = checkbox.closest('.case-container');
        const binValue = container.getAttribute('data-case-bin');
        return { caseNum, binValue };
    });

    // Agrupar casos por país (bin)
    const casesByBin = {};
    selectedCases.forEach(caseInfo => {
        if (!casesByBin[caseInfo.binValue]) {
            casesByBin[caseInfo.binValue] = [];
        }
        casesByBin[caseInfo.binValue].push(caseInfo.caseNum);
    });

    // Verificar que todos los casos seleccionados sean del mismo país
    if (Object.keys(casesByBin).length > 1) {
        alert('Error: No se pueden unificar casos de diferentes países.');
        return;
    }

    // Proceder con la unificación para el país correspondiente
    const binValue = Object.keys(casesByBin)[0];
    const casesForBin = casesByBin[binValue].sort((a, b) => a - b);
    
    const caseToKeep = casesForBin[0];
    const casesToRemove = casesForBin.slice(1);

    // Combinar datos de los casos
    casesToRemove.forEach(caseNum => {
        combineCaseData(caseToKeep, caseNum);
    });

    // Eliminar los casos que se están unificando
    casesToRemove.forEach(caseNum => {
        const caseElement = document.querySelector(`.case-container[data-case="${caseNum}"][data-case-bin="${binValue}"]`);
        if (caseElement) {
            caseElement.remove();
            console.log(`Caso ${caseNum} eliminado.`);
        }
    });

    // Actualizar el caso que se mantiene
    actualizarCasoUnificado(caseToKeep, binValue);

    // Renumerar los casos
    renumerarTodosLosCasos();

    console.log('Proceso de unificación completado');
}

function renumerarTodosLosCasos() {
    console.log('Iniciando renumeración de casos...');
    const chileCases = Array.from(document.querySelectorAll('.case-container[data-case-bin="555505"]'));
    const peruCases = Array.from(document.querySelectorAll('.case-container[data-case-bin="523510"]'));

    console.log(`Casos encontrados - Chile: ${chileCases.length}, Perú: ${peruCases.length}`);

    // Renumerar casos para Chile empezando desde 1
    renumerarCasosPorPais(chileCases, 'Chile', 1);

    // Renumerar casos para Perú empezando desde 1
    renumerarCasosPorPais(peruCases, 'Perú', 1);

    // Asegurar checkboxes después de la renumeración
    asegurarCheckboxesEnTodosCasos();
}

function renumerarCasosPorPais(casos, pais, startNumber) {
    console.log(`Renumerando casos para ${pais}...`);
    casos.forEach((caso, index) => {
        const newCaseNumber = startNumber + index;
        caso.setAttribute('data-case', newCaseNumber); // Actualizar el atributo data-case
        const caseTitle = caso.querySelector('.case-header');
        if (caseTitle) {
            caseTitle.textContent = `Caso ${pais} ${newCaseNumber}`; // Actualizar el título
        }
        console.log(`Caso ${pais} ${newCaseNumber} renumerado.`);
    });
}


function crearNuevoContainer(type, caseNumber, country) {
    const container = document.createElement('div');
    container.className = 'insert-container';
    container.setAttribute('data-type', type);
    
    container.innerHTML = `
        <textarea id="${type}DataInput${country}${caseNumber}" 
                  rows="1" 
                  placeholder="Agregar datos de ${type} del caso ${caseNumber}..."></textarea>
        <button onclick="addRow('${type}', '${country}', ${caseNumber})">Insertar</button>
    `;
    
    return container;
}

function combineCaseData(caseToKeep, caseToMerge) {
    const keepContainer = document.querySelector(`.case-container[data-case="${caseToKeep}"]`);
    const mergeContainer = document.querySelector(`.case-container[data-case="${caseToMerge}"]`);
    
    if (!keepContainer || !mergeContainer) {
        console.error('No se encontraron los contenedores de los casos');
        return;
    }

    // Verificar que ambos casos sean del mismo país
    const keepBin = keepContainer.getAttribute('data-case-bin');
    const mergeBin = mergeContainer.getAttribute('data-case-bin');
    
    if (keepBin !== mergeBin) {
        console.error('Intento de combinar casos de diferentes países');
        return;
    }

    const country = keepBin === '555505' ? 'Chile' : 'Peru';
    const tableTypes = ['auth', 'pres', 'mambu'];

    tableTypes.forEach(tableType => {
        const targetTable = document.querySelector(`#table${tableType}${country}${caseToKeep} tbody`);
        const sourceTable = document.querySelector(`#table${tableType}${country}${caseToMerge} tbody`);

        if (targetTable && sourceTable) {
            const rowsToMerge = sourceTable.querySelectorAll('tr');
            rowsToMerge.forEach(row => {
                const newRow = row.cloneNode(true);
                targetTable.appendChild(newRow);
            });
        }
    });
}

// Nueva función para asegurar que todos los casos tengan checkboxes
function asegurarCheckboxesEnTodosCasos() {
    console.log('Asegurando checkboxes en todos los casos...');
    const todosLosCasos = document.querySelectorAll('.case-container');
    
    todosLosCasos.forEach(caso => {
        const numeroCaso = caso.getAttribute('data-case');
        console.log(`Verificando caso ${numeroCaso}`);
        
        // Buscar el div de checkbox existente
        let checkboxDiv = caso.querySelector('.checkbox-container');
        
        // Si no existe el div del checkbox, crearlo
        if (!checkboxDiv) {
            console.log(`Creando nuevo checkbox para caso ${numeroCaso}`);
            checkboxDiv = document.createElement('div');
            checkboxDiv.className = 'checkbox-container';
            
            // Crear el checkbox
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'case-checkbox';
            checkbox.setAttribute('data-case', numeroCaso);
            
            // Insertar el checkbox al principio del caso
            checkboxDiv.appendChild(checkbox);
            caso.insertBefore(checkboxDiv, caso.firstChild);
        }
        
        // Asegurar que el checkbox esté habilitado
        const checkbox = checkboxDiv.querySelector('.case-checkbox');
        if (checkbox) {
            checkbox.disabled = false;
            checkbox.checked = false;
        }
    });
    
    console.log('Verificación de checkboxes completada');
}

function actualizarCasoUnificado(caseToKeep) {
    console.log(`Actualizando caso unificado ${caseToKeep}`);
    const caseToKeepElement = document.querySelector(`.case-container[data-case="${caseToKeep}"]`);
    
    if (caseToKeepElement) {
        // Actualizar el título del caso
        const caseTitle = caseToKeepElement.querySelector('.case-header');
        if (caseTitle) {
            caseTitle.textContent = `Caso ${caseToKeep} (Unificado)`;
        }

        // Asegurar que el caso tenga un checkbox
        let checkboxContainer = caseToKeepElement.querySelector('.checkbox-container');
        if (!checkboxContainer) {
            checkboxContainer = document.createElement('div');
            checkboxContainer.className = 'checkbox-container';
            
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'case-checkbox';
            checkbox.setAttribute('data-case', caseToKeep);
            
            checkboxContainer.appendChild(checkbox);
            caseToKeepElement.insertBefore(checkboxContainer, caseToKeepElement.firstChild);
        }

        // Asegurarse de que los textareas de inserción existan
        const insertContainers = ['auth', 'pres', 'mambu'];
        insertContainers.forEach(type => {
            let container = caseToKeepElement.querySelector(`.insert-container[data-type="${type}"]`);
            if (!container) {
                container = crearNuevoContainer(type, caseToKeep);
                caseToKeepElement.appendChild(container);
            }
        });
    }
}

function combineCaseData(caseToKeep, caseToMerge) {
    const keepContainer = document.querySelector(`.case-container[data-case="${caseToKeep}"]`);
    const mergeContainer = document.querySelector(`.case-container[data-case="${caseToMerge}"]`);
    
    console.log('==== INICIO DE UNIFICACIÓN DE CASOS ====');
    console.log('Caso a mantener:', caseToKeep);
    console.log('Caso a fusionar:', caseToMerge);

    if (!keepContainer || !mergeContainer) {
        console.error('Error: No se encontraron los contenedores');
        console.log('Container a mantener:', keepContainer);
        console.log('Container a fusionar:', mergeContainer);
        return;
    }

    // Verificar país de cada caso
    const keepBin = keepContainer.getAttribute('data-case-bin');
    const mergeBin = mergeContainer.getAttribute('data-case-bin');
    
    console.log('Información de contenedores:');
    console.log(`Caso ${caseToKeep} - BIN: ${keepBin}`);
    console.log(`Caso ${caseToMerge} - BIN: ${mergeBin}`);

    if (keepBin !== mergeBin) {
        console.error(`Error: Intento de combinar casos de diferentes países (${keepBin} vs ${mergeBin})`);
        return;
    }

    const country = keepBin === '555505' ? 'Chile' : 'Peru';
    console.log(`País detectado: ${country}`);

    const tableTypes = ['auth', 'pres', 'mambu'];

    tableTypes.forEach(tableType => {
        const targetTableId = `table${tableType}${country}${caseToKeep}`;
        const sourceTableId = `table${tableType}${country}${caseToMerge}`;

        console.log(`\n=== Procesando tablas de tipo: ${tableType} ===`);
        console.log('Buscando tabla origen:', sourceTableId);
        console.log('Buscando tabla destino:', targetTableId);

        const targetTable = document.querySelector(`#${targetTableId} tbody`);
        const sourceTable = document.querySelector(`#${sourceTableId} tbody`);

        console.log('Tabla origen encontrada:', !!sourceTable);
        console.log('Tabla destino encontrada:', !!targetTable);

        // Mostrar el HTML actual de las tablas
        if (sourceTable) {
            console.log('Contenido tabla origen:', sourceTable.innerHTML);
        }
        if (targetTable) {
            console.log('Contenido tabla destino:', targetTable.innerHTML);
        }

        if (targetTable && sourceTable) {
            console.log(`Iniciando transferencia de filas de ${sourceTableId} a ${targetTableId}`);
            const rowsToMerge = sourceTable.querySelectorAll('tr');
            console.log(`Número de filas a transferir: ${rowsToMerge.length}`);

            rowsToMerge.forEach((row, index) => {
                const newRow = row.cloneNode(true);
                targetTable.appendChild(newRow);
                console.log(`Fila ${index + 1} transferida`);
            });
        } else {
            console.error(`No se pudo procesar la tabla ${tableType}:`, {
                targetTableExists: !!targetTable,
                sourceTableExists: !!sourceTable
            });
        }
    });

    console.log('==== FIN DE UNIFICACIÓN DE CASOS ====\n');
}


// Nueva función para comparar filas y evitar duplicados
function rowsAreEqual(row1, row2) {
    const cells1 = row1.querySelectorAll('td');
    const cells2 = row2.querySelectorAll('td');

    if (cells1.length !== cells2.length) return false;

    for (let i = 0; i < cells1.length; i++) {
        if (cells1[i].textContent.trim() !== cells2[i].textContent.trim()) {
            return false;
        }
    }

    return true;
}

// Función auxiliar para depuración
function logTableInfo(tableId) {
    const table = document.querySelector(`#${tableId}`);
    if (table) {
        console.log(`Tabla ${tableId} encontrada:`, {
            rows: table.querySelectorAll('tr').length,
            headers: Array.from(table.querySelectorAll('th')).map(th => th.textContent)
        });
    } else {
        console.warn(`Tabla ${tableId} no encontrada`);
    }
}





function renumberCases(startCaseNumber) {
    console.log('Iniciando renumeración desde el caso:', startCaseNumber);

    // Obtener todos los casos, separando por país
    const allCases = document.querySelectorAll('.case-container');
    console.log('Total de casos encontrados:', allCases.length);

    const chileCases = Array.from(document.querySelectorAll('.case-container[data-pais="Chile"]'));
    const peruCases = Array.from(document.querySelectorAll('.case-container[data-pais="Perú"]'));

    console.log(`Número total de casos encontrados en Chile: ${chileCases.length}`);
    console.log(`Número total de casos encontrados en Perú: ${peruCases.length}`);

    // Imprimir los data-pais de todos los casos
    allCases.forEach(caseElement => {
        console.log(`Caso encontrado con data-pais: ${caseElement.getAttribute('data-pais')}`);
    });

    // Renumerar casos para Chile
    renumberCountryCases(chileCases, 1, 'Chile');

    // Renumerar casos para Perú
    renumberCountryCases(peruCases, 1, 'Perú');
}

function renumberCountryCases(caseElements, startNumber, country) {
    let nextNumber = startNumber;

    // Ordenar los casos por su número de caso actual
    const sortedCases = caseElements.sort((a, b) => {
        return parseInt(a.getAttribute('data-case')) - parseInt(b.getAttribute('data-case'));
    });

    sortedCases.forEach(caseElement => {
        const currentNumber = parseInt(caseElement.getAttribute('data-case'));

        console.log(`Evaluando caso ${currentNumber} (${country})`);

        // Siempre renumeramos, independientemente del número actual
        console.log(`Renumerando caso ${currentNumber} a ${nextNumber} (${country})`);
        updateCaseNumber(caseElement, nextNumber, country);

        // Incrementamos el siguiente número para la secuencia
        nextNumber++; 
        console.log(`Secuencia actualizada: el próximo caso será ${nextNumber}`);
    });
}


function updateCaseNumber(caseElement, newNumber, country) {
    const oldNumber = caseElement.getAttribute('data-case');
    console.log(`Actualizando caso de ${oldNumber} a ${newNumber} (${country})`);

    caseElement.setAttribute('data-case', newNumber);

    // Actualizar el título del caso
    const caseTitle = caseElement.querySelector('.case-header');
    if (caseTitle) {
        caseTitle.textContent = caseTitle.textContent.replace(/\d+/, newNumber);
        console.log(`Título del caso actualizado de "${oldNumber}" a "${newNumber}"`);
    }

    // Actualizar IDs de textareas y onclick de botones
    const textareas = caseElement.querySelectorAll('textarea');
    textareas.forEach(textarea => {
        const oldId = textarea.id;
        const idBase = oldId.replace(/[0-9]+$/, '');
        textarea.id = `${idBase}${newNumber}`;
        console.log(`Actualizado textarea ID de ${oldId} a ${textarea.id}`);
    });

    const buttons = caseElement.querySelectorAll('button');
    buttons.forEach(button => {
        const oldOnClick = button.getAttribute('onclick');
        if (oldOnClick) {
            const newOnClick = oldOnClick.replace(/\d+(?=\)$)/, newNumber);
            button.setAttribute('onclick', newOnClick);
            console.log(`Actualizado onclick de botón de ${oldOnClick} a ${newOnClick}`);
        }
    });

    // Actualizar selector de mensajes si existe
    const messageSelector = caseElement.querySelector(`select[id^="messageSelector${country}"]`);
    if (messageSelector) {
        const oldId = messageSelector.id;
        const idBase = oldId.replace(/[0-9]+$/, '');
        messageSelector.id = `${idBase}${newNumber}`;
        console.log(`Actualizado selector ID de ${oldId} a ${messageSelector.id}`);
    }

    // Actualizar div de mensaje seleccionado si existe
    const selectedMessageDiv = caseElement.querySelector(`div[id^="selectedMessage${country}"]`);
    if (selectedMessageDiv) {
        const oldId = selectedMessageDiv.id;
        const idBase = oldId.replace(/[0-9]+$/, '');
        selectedMessageDiv.id = `${idBase}${newNumber}`;
        console.log(`Actualizado div ID de ${oldId} a ${selectedMessageDiv.id}`);
    }
}


function getCaseBin(caseNum) {
    const caseContainer = document.querySelector(`.case-container[data-case="${caseNum}"]`);
    return caseContainer ? caseContainer.getAttribute('data-case-bin') : null;
}

function combineCaseData(caseToKeep, caseToMerge) {
    const caseToKeepContainer = document.querySelector(`.case-container[data-case="${caseToKeep}"]`);
    const caseToMergeContainer = document.querySelector(`.case-container[data-case="${caseToMerge}"]`);

    const caseToKeepTables = caseToKeepContainer.querySelectorAll('table tbody');
    const caseToMergeTables = caseToMergeContainer.querySelectorAll('table tbody');

    caseToKeepTables.forEach((table, index) => {
        const rowsToMerge = caseToMergeTables[index].querySelectorAll('tr');
        rowsToMerge.forEach(row => {
            table.appendChild(row.cloneNode(true));
        });
    });
}

function removeCase(caseNum) {
    const caseContainer = document.querySelector(`.case-container[data-case="${caseNum}"]`);
    if (caseContainer) {
        caseContainer.remove();
    }
}



function loadMessageTemplates() {
    fetch('plantillas.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Plantillas cargadas:', data);
            const selectors = document.querySelectorAll('select[id^="messageSelector"]');
            selectors.forEach(selector => {
                for (let key in data) {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = key;
                    selector.appendChild(option);
                }
            });
        })
        .catch(error => {
            console.error('Error loading message templates:', error);
            const errorDiv = document.createElement('div');
            errorDiv.style.color = 'red';
            errorDiv.textContent = `Error al cargar las plantillas: ${error.message}`;
            document.body.insertBefore(errorDiv, document.body.firstChild);
        });
}

function updateMessage(country, caseNumber) {
    const selector = document.getElementById(`messageSelector${country}${caseNumber}`); // Cambia aquí
    const selectedMessageDiv = document.getElementById(`selectedMessage${country}${caseNumber}`); // Cambia aquí
    const selectedKey = selector.value;

    // Limpiar el contenido anterior
    selectedMessageDiv.innerHTML = "";

    fetch('plantillas.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Datos de plantillas para actualización:', data);
            if (selectedKey && data[selectedKey]) {
                const messageTemplate = data[selectedKey].mensaje;

                // Crear un textarea para editar el mensaje
                const textarea = document.createElement('textarea');
                textarea.value = messageTemplate; // Asignar el mensaje seleccionado
                textarea.rows = 4; // Número de filas del textarea
                textarea.style.width = '100%'; // Ancho completo
                textarea.style.marginTop = '10px'; // Margen superior

                // Agregar un botón para guardar los cambios
                const saveButton = document.createElement('button');
                saveButton.textContent = 'Guardar Cambios';
                saveButton.style.marginTop = '10px';
                saveButton.onclick = () => {
                    data[selectedKey].mensaje = textarea.value; // Actualizar el mensaje en el objeto
                    selectedMessageDiv.innerHTML = `<strong>Mensaje Editado:</strong> ${textarea.value}`; // Actualizar el HTML con el mensaje editado
                    console.log(`HTML actualizado para caso ${caseNumber}`);
                };

                // Limpiar el div antes de añadir los nuevos elementos
                selectedMessageDiv.innerHTML = '';

                // Agregar el textarea y el botón al div
                selectedMessageDiv.appendChild(textarea);
                selectedMessageDiv.appendChild(saveButton);
            } else {
                selectedMessageDiv.innerHTML = "<strong>No hay mensaje seleccionado.</strong>"; // Mensaje por defecto si no hay selección
            }
        })
        .catch(error => {
            console.error('Error updating message:', error);
            selectedMessageDiv.innerHTML = `<strong>Error:</strong> ${error.message}`;
        });
}

function insertEvidenceData() {
    const evidenceInput = document.getElementById('evidenceInput').value;
    const rows = evidenceInput.split('\n'); // Separar las filas por saltos de línea
    const evidenceTableBody = document.querySelector('#evidenceTable tbody');

    rows.forEach(row => {
        const columns = row.split('\t'); // Separar las columnas por tabulaciones
        if (columns.length > 1) { // Asegurarse de que hay datos en la fila
            const newRow = evidenceTableBody.insertRow(); // Insertar una nueva fila en la tabla

            columns.forEach(column => {
                const newCell = newRow.insertCell(); // Insertar una nueva celda en la fila

                // Reemplazar 'null' o valores vacíos por 'N/A'
                newCell.textContent = (column === 'null' || column.trim() === '') ? 'N/A' : column; // Asignar N/A si es null o vacío
            });
        }
    });

    // Limpiar el textarea después de insertar los datos
    document.getElementById('evidenceInput').value = '';
}

function generateReport() {
    // Obtener el contenido de la tabla de casos procesados
    const caseContainer = document.getElementById('caseContainer').innerHTML;

    // Obtener el contenido de la tabla de evidencia
    const evidenceTable = document.getElementById('evidenceTable').outerHTML;

    // Función para extraer el número más alto de caso
    function getHighestCaseNumber(content, country) {
        const regex = new RegExp(`Caso ${country} (\\d+)`, 'g');
        let highestNumber = 0;
        let match;
        while ((match = regex.exec(content)) !== null) {
            const number = parseInt(match[1]);
            if (number > highestNumber) {
                highestNumber = number;
            }
        }
        return highestNumber;
    }

    // Función para contar elementos específicos
    function countSpecificElements(content, value) {
        const regex = new RegExp(`<td>${value}<\\/td>`, 'g');
        return (content.match(regex) || []).length;
    }

    // Obtener los números más altos de caso para Chile y Perú
    const highestChileCase = getHighestCaseNumber(caseContainer, 'Chile');
    const highestPeruCase = getHighestCaseNumber(caseContainer, 'Perú');

    // Contar elementos específicos para Chile y Perú
    const chileElements = countSpecificElements(evidenceTable, '152');
    const peruElements = countSpecificElements(evidenceTable, '604');

    // Calcular totales
    const chileTotal = highestChileCase + chileElements;
    const peruTotal = highestPeruCase + peruElements;
    const totalCasos = chileTotal + peruTotal;

    // Obtener la fecha actual
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0'); // Meses son 0-indexed
    const day = String(today.getDate()).padStart(2, '0');
    const formattedDate = `${year}${month}${day}`; // Formato YYYYMMDD

    // Crear el contenido del reporte HTML
    const reportContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Reporte de Casos Detectados en Proceso de IPM</title>
            <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
            <style>
                body {
                    font-family: 'Roboto', Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    background-color: #f4f4f4;
                    margin: 0;
                    padding: 0;
                }

                .container {
                    max-width: 1800px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #fff;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                }

                h1, h2 {
                    color: #2c3e50;
                    border-bottom: 2px solid #3498db;
                    padding-bottom: 10px;
                    margin-top: 30px;
                }

                h1 {
                    font-size: 2.5em;
                    text-align: center;
                }

                h2 {
                    font-size: 1.8em;
                }

                .table-responsive {
                    overflow-x: auto;
                    margin-bottom: 30px;
                }

                table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-bottom: 20px;
                    background-color: #fff;
                }

                th, td {
                    border: 1px solid #e0e0e0;
                    padding: 12px;
                    text-align: left;
                }

                th {
                    background-color: #3498db;
                    color: white;
                    font-weight: bold;
                    text-transform: uppercase;
                }

                tr:nth-child(even) {
                    background-color: #f8f8f8;
                }

                tr:hover {
                    background-color: #e8f4f8;
                    transition: background-color 0.3s ease;
                }

                .summary-table {
                    width: 950px; /* Aumentar el ancho de la tabla */
                    margin: 20px auto; /* Centrar la tabla */
                    font-size: 0.9em;
                    border: 2px solid #3498db;
                }

                .summary-table th {
                    background-color: #2980b9;
                }

                .summary-table td:last-child {
                    font-weight: bold;
                    text-align: center;
                }

                @media print {
                    body {
                        background-color: #fff;
                    }

                    .container {
                        box-shadow: none;
                    }

                    h1, h2 {
                        page-break-after: avoid;
                    }

                    table {
                        page-break-inside: avoid;
                    }
                }

                @media (max-width: 768px) {
                    .summary-table {
                        width: 100%;
                        margin-bottom: 20px;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Reporte de Casos Detectados en Proceso de IPM - ${formattedDate}</h1>
                <table class="summary-table">
                    <thead>
                        <tr>
                            <th>País</th>
                            <th>Total de Casos</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Chile</td>
                            <td>${chileTotal}</td>
                        </tr>
                        <tr>
                            <td>Perú</td>
                            <td>${peruTotal}</td>
                        </tr>
                        <tr>
                            <td><strong>Total General</strong></td>
                            <td><strong>${totalCasos}</strong></td>
                        </tr>
                    </tbody>
                </table>

                <h2>Casos Procesados</h2>
                <div class="table-responsive">
                    ${filterCaseContainer(caseContainer)}
                </div>
                <h2>Evidencia de anulaciones / confirmaciones manual</h2>
                <div class="table-responsive">
                    ${evidenceTable}
                </div>
            </div>
        </body>
        </html>
    `;

    // Crear un blob con el contenido del reporte
    const blob = new Blob([reportContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);

    // Crear un enlace para descargar el archivo
    const a = document.createElement('a');
    a.href = url;
    a.download = `Reporte_de_Rechazos_y_Anulaciones-Confirmaciones_Manuales_${formattedDate}.html`; // Nombre del archivo a descargar
    document.body.appendChild(a);
    a.click(); // Simular clic para descargar
    document.body.removeChild(a); // Limpiar el DOM
    URL.revokeObjectURL(url); // Liberar el objeto URL
}

// Asumiendo que esta función existe en su código actual
function filterCaseContainer(content) {
    // Implementar la lógica de filtrado si es necesario
    return content;
}

// Asumiendo que esta función existe en su código actual
function filterCaseContainer(content) {
    // Implementar la lógica de filtrado si es necesario
    return content;
}

// Función para filtrar el contenido del caseContainer
function filterCaseContainer(content) {
    // Crear un contenedor temporal para manipular el HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = content;

    // Eliminar los elementos que deseas ocultar
    const elementsToRemove = [
        '[id^="authDataInput"]',
        '[id^="presDataInput"]',
        '[id^="mambuDataInput"]',
        '.case-checkbox',
        'button[onclick^="addRow"]', // Para ocultar botones de insertar
        '[id^="messageSelector"]', // Para ocultar selectores de mensaje
        'button[onclick^="deleteRow"]' // Para ocultar botones de eliminar
    ];

    elementsToRemove.forEach(selector => {
        const elements = tempDiv.querySelectorAll(selector);
        elements.forEach(element => element.remove());
    });

    // Retornar el contenido filtrado
    return tempDiv.innerHTML;
}





    </script>
</body>
</html>
