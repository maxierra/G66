<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consulta de Rechazos</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100vw;
            overflow-x: hidden;
        }

        .container-fluid {
            padding: 0 !important;
            margin: 0 !important;
            width: 100vw !important;
            max-width: none !important;
        }

        .card {
            border: none;
            border-radius: 0;
            margin: 0 !important;
            width: 100% !important;
        }

        .card-body {
            padding: 0 !important;
        }

        .table-container {
            width: 100% !important;
            margin: 0 !important;
            padding: 0 !important;
            overflow: hidden !important;
        }

        .table-responsive {
            margin: 0 !important;
            padding: 0 !important;
            width: 100% !important;
            overflow-x: auto !important;
        }

        .table {
            width: 100% !important;
            margin-bottom: 0 !important;
        }

        .table th, .table td {
            max-width: 200px !important;
            white-space: normal !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
            padding: 4px 8px !important;
            vertical-align: middle !important;
            word-wrap: break-word !important;
        }

        .table td {
            font-size: 0.85rem !important;
            line-height: 1.2 !important;
        }

        .table-responsive {
            margin: 0 !important;
            padding: 0 !important;
            width: 100% !important;
            overflow-x: auto !important;
        }

        .table {
            table-layout: fixed !important;
            width: 100% !important;
        }

        /* Specific column widths */
        .table th:nth-child(1), .table td:nth-child(1) { width: 80px !important; }  /* PROCESADA */
        .table th:nth-child(2), .table td:nth-child(2) { width: 500px !important; } /* MENSAJE */

        .table th {
            background-color: #0d6efd !important;
            color: white !important;
            font-weight: 600 !important;
            text-transform: uppercase !important;
            font-size: 0.9rem !important;
            letter-spacing: 0.5px !important;
            padding: 15px 12px !important;
            border: none !important;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2) !important;
            position: sticky !important;
            top: 0 !important;
            z-index: 10 !important;
            white-space: nowrap !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        }

        .table th:first-child {
            border-top-left-radius: 8px !important;
        }

        .table th:last-child {
            border-top-right-radius: 8px !important;
        }

        .table tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05) !important;
            transition: all 0.3s ease !important;
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(13, 110, 253, 0.02) !important;
        }

        .table tbody td {
            border: none !important;
            border-bottom: 1px solid #e9ecef !important;
            color: #495057 !important;
            font-size: 0.9rem !important;
        }

        .table {
            border-collapse: separate !important;
            border-spacing: 0 !important;
            border: 1px solid #e9ecef !important;
            border-radius: 8px !important;
            overflow: hidden !important;
            margin-bottom: 1rem !important;
        }

        /* Añadir un efecto de brillo sutil a los encabezados */
        .table thead th::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(255,255,255,0.1), transparent);
            pointer-events: none;
        }

        /* Estilos para las filas según ORIGEN_ */
        #tablaResultados tbody tr.online-row {
            background-color: #00ff00 !important;
        }
        #tablaResultados tbody tr.forzada-row {
            background-color: #ffff00 !important;
            cursor: pointer !important;
        }
        
        /* Asegurar que todas las celdas de la fila tengan el mismo color */
        #tablaResultados tbody tr.online-row td {
            background-color: #00ff00 !important;
        }
        #tablaResultados tbody tr.forzada-row td {
            background-color: #ffff00 !important;
        }

        .controls-container {
            padding: 1rem !important;
            display: flex;
            align-items: center;
            gap: 1rem;
            background-color: #fff;
            flex-wrap: wrap;
        }

        .controls-left {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex: 1;
        }

        .mode-title {
            font-size: 1.1rem;
            margin: 0;
            padding: 0.7rem 1.2rem;
            white-space: nowrap;
            text-transform: uppercase;
            font-weight: 700;
            letter-spacing: 0.5px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }

        .mode-title.infinitus {
            background: linear-gradient(135deg, #2193b0, #6dd5ed);
            color: white;
            border: 2px solid #2193b0;
        }

        .mode-title.reporte-ipm {
            background: linear-gradient(135deg, #FF512F, #DD2476);
            color: white;
            border: 2px solid #DD2476;
        }

        .mode-title:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .mode-title::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(255,255,255,0.2), transparent);
            pointer-events: none;
        }

        @keyframes shine {
            to {
                background-position: 200% center;
            }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .vista-switch {
            padding: 0.7rem 1.2rem;
            background: linear-gradient(135deg, #f6f8fa, #e9ecef);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 1px solid #dee2e6;
        }

        .vista-switch:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .form-check-input {
            width: 3em !important;
            height: 1.5em !important;
            margin-right: 0.5em !important;
            cursor: pointer;
            transition: all 0.3s ease !important;
        }

        .form-check-input:checked {
            background-color: #2193b0 !important;
            border-color: #2193b0 !important;
        }

        .form-check-input:not(:checked) {
            background-color: #FF512F !important;
            border-color: #FF512F !important;
        }

        .form-check-label {
            font-weight: 600;
            font-size: 1rem;
            color: #495057;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            cursor: pointer;
            user-select: none;
        }

        .form-switch .form-check-input {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e") !important;
        }

        .form-switch .form-check-input:focus {
            box-shadow: 0 0 0 0.2rem rgba(33, 147, 176, 0.25) !important;
        }

        .form-check {
            display: flex;
            align-items: center;
            margin: 0;
            padding: 0;
        }

        @media (max-width: 768px) {
            .controls-container {
                flex-direction: column;
                align-items: stretch;
            }
            
            .controls-left {
                flex-direction: column;
                width: 100%;
            }

            .input-group {
                width: 100% !important;
            }

            .mode-title {
                text-align: center;
                width: 100%;
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="container-fluid">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-exclamation-circle me-2"></i>Consulta de Rechazos
                    </h5>
                    <button id="btnCopiarTabla" class="btn btn-secondary" style="display: none;">
                        <i class="fas fa-copy"></i> Copiar Tabla
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="controls-container">
                    <div class="controls-left">
                        <div class="input-group" style="max-width: 400px;">
                            <input type="date" id="fechaConsulta" class="form-control">
                            <button id="btnConsultar" class="btn btn-primary">
                                <i class="fas fa-search me-1"></i>Consultar
                            </button>
                        </div>
                        <div class="mode-title infinitus" id="subtitulo">Vista Reducida para usar en INFINITUS</div>
                    </div>
                    <div class="vista-switch">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="vistaCompleta">
                            <label class="form-check-label" for="vistaCompleta">Vista Completa</label>
                        </div>
                    </div>
                </div>
                
                <div class="table-container">
                    <div class="table-responsive">
                        <table id="tablaResultados" class="table table-striped table-bordered" style="width: max-content !important; min-width: 100% !important;">
                            <thead>
                                <tr>
                                    <!-- Las columnas se agregarán dinámicamente -->
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Los datos se agregarán dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="loadingOverlay" class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>

    <script>
        // Cargar estados guardados
        let estadosRevisados = JSON.parse(localStorage.getItem('filasRevisadas') || '{}');

        function toggleEstadoFila(fila, recallid, valorOrigen) {
            if (!valorOrigen.includes('FORZADA')) return; // Solo procesar filas FORZADA
            
            const estaVerde = fila.classList.contains('online-row');
            
            // Remover ambas clases
            fila.classList.remove('online-row', 'forzada-row');
            
            if (estaVerde) {
                // Cambiar a amarillo
                fila.classList.add('forzada-row');
                delete estadosRevisados[recallid];
            } else {
                // Cambiar a verde
                fila.classList.add('online-row');
                estadosRevisados[recallid] = true;
            }
            
            // Guardar estado
            localStorage.setItem('filasRevisadas', JSON.stringify(estadosRevisados));
            
            // Forzar el repintado
            fila.style.display = 'none';
            fila.offsetHeight; // Forzar un reflow
            fila.style.display = '';
        }

        // Función principal para colorear filas
        function colorearFilas() {
            const tabla = document.getElementById('tablaResultados');
            if (!tabla) return;

            const filas = tabla.getElementsByTagName('tr');
            for (let i = 1; i < filas.length; i++) {
                const fila = filas[i];
                const celdas = fila.getElementsByTagName('td');
                if (!celdas.length) continue;

                // Buscar índices de columnas
                const headers = tabla.getElementsByTagName('th');
                const origenIndex = Array.from(headers).findIndex(th => th.textContent.trim() === 'ORIGEN_');
                const recallidIndex = Array.from(headers).findIndex(th => th.textContent.trim() === 'RECALLID');
                
                if (origenIndex === -1 || recallidIndex === -1) continue;

                const valorOrigen = celdas[origenIndex].textContent.trim();
                const recallid = celdas[recallidIndex].textContent.trim();

                // Limpiar clases
                fila.classList.remove('online-row', 'forzada-row');

                // Aplicar color según estado
                if (estadosRevisados[recallid] || valorOrigen === 'ON-LINE') {
                    fila.classList.add('online-row');
                } else if (valorOrigen.includes('FORZADA')) {
                    fila.classList.add('forzada-row');
                }

                // Agregar evento de doble clic
                fila.ondblclick = () => toggleEstadoFila(fila, recallid, valorOrigen);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            colorearFilas();
            
            // Recolorear después de cada búsqueda
            document.getElementById('btnConsultar').addEventListener('click', function() {
                setTimeout(colorearFilas, 500);
            });
        });

        // Función para copiar el contenido de la tabla
        function copiarContenidoTabla() {
            const tabla = document.querySelector('#tablaResultados tbody');
            if (!tabla || !tabla.rows.length) {
                Swal.fire({
                    icon: 'info',
                    title: 'No hay datos para copiar',
                    text: 'Realiza una consulta primero'
                });
                return;
            }

            let contenido = '';
            for (let i = 0; i < tabla.rows.length; i++) {
                const fila = tabla.rows[i];
                const textoFila = Array.from(fila.cells)
                    .map(celda => celda.textContent.trim())
                    .join('\t');
                contenido += textoFila + '\n';
            }

            navigator.clipboard.writeText(contenido).then(() => {
                Swal.fire({
                    icon: 'success',
                    title: 'Copiado!',
                    text: 'El contenido de la tabla ha sido copiado al portapapeles',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }).catch(err => {
                console.error('Error al copiar:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'No se pudo copiar el contenido'
                });
            });
        }

        // Agregar evento al botón de copiar
        document.getElementById('btnCopiarTabla').addEventListener('click', copiarContenidoTabla);

        document.getElementById('btnConsultar').addEventListener('click', async function() {
            const fecha = document.getElementById('fechaConsulta').value;
            const vistaCompleta = document.getElementById('vistaCompleta').checked;
            const tabla = document.getElementById('tablaResultados');
            
            try {
                const response = await fetch(`/rechazos/consulta?fecha=${fecha}&vistaCompleta=${vistaCompleta}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                if (data.length === 0) {
                    Swal.fire({
                        icon: 'info',
                        title: 'Sin resultados',
                        text: 'No se encontraron registros para la fecha seleccionada'
                    });
                    tabla.querySelector('thead tr').innerHTML = '';
                    tabla.querySelector('tbody').innerHTML = '';
                    document.getElementById('btnCopiarTabla').style.display = 'none';
                    return;
                }

                // Crear encabezados
                const headers = Object.keys(data[0]);
                tabla.querySelector('thead tr').innerHTML = headers.map(header => `
                    <th>${header}</th>
                `).join('');

                // Crear filas de datos
                tabla.querySelector('tbody').innerHTML = data.map(row => `
                    <tr>${headers.map(header => `<td>${row[header] || ''}</td>`).join('')}</tr>
                `).join('');

                // Mostrar el botón de copiar cuando hay datos
                document.getElementById('btnCopiarTabla').style.display = 'block';

            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al consultar los datos'
                });
                document.getElementById('btnCopiarTabla').style.display = 'none';
            }
        });

        // Agregar botón para reiniciar estados
        document.addEventListener('DOMContentLoaded', function() {
            const btnContainer = document.querySelector('.controls-container');
            const resetBtn = document.createElement('button');
            resetBtn.className = 'btn btn-warning ms-2';
            resetBtn.textContent = 'Reiniciar Estados';
            resetBtn.onclick = function() {
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "Esto reiniciará el estado de todas las filas revisadas",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, reiniciar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        localStorage.removeItem('filasRevisadas');
                        estadosRevisados = {};
                        colorearFilas();
                        Swal.fire(
                            '¡Reiniciado!',
                            'Los estados han sido reiniciados',
                            'success'
                        );
                    }
                });
            };
            btnContainer.appendChild(resetBtn);
        });

        document.getElementById('vistaCompleta').addEventListener('change', function() {
            const subtitulo = document.getElementById('subtitulo');
            if (this.checked) {
                subtitulo.textContent = 'VISTA COMPLETA PARA USAR EN REPORTE IPM';
                subtitulo.classList.remove('infinitus');
                subtitulo.classList.add('reporte-ipm');
            } else {
                subtitulo.textContent = 'VISTA REDUCIDA PARA USAR EN INFINITUS';
                subtitulo.classList.remove('reporte-ipm');
                subtitulo.classList.add('infinitus');
            }
        });
    </script>
</body>
</html>